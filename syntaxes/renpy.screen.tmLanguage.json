{
  "information_for_contributors": [ "Please remember to regenerate the ts token patterns using the 'syntax-to-token-pattern.py' python script" ],
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Ren'Py Screen",
  "scopeName": "source.renpy.screen",
  "patterns": [ { "include": "#screen-language" }, { "include": "#screen-action-reference" } ],
  "repository": {
    "builtin-screens": {
      "name": "support.function.builtin.screen.renpy",
      "match": "(?<!\\.)\\b(?:start|quit|after_load|splashscreen|before_main_menu|main_menu|after_warp|hide_windows)\\b"
    },
    "screen-def-name": {
      "comment": "TODO: Should combine this with label-def-name",
      "patterns": [
        { "include": "source.renpy.python#builtin-possible-callables" },
        { "include": "#builtin-screens" },
        {
          "match": "(?<=^|[ \\t])(\\b(?:[a-zA-Z_]\\w*)\\b)?(\\.)?(\\b(?:[a-zA-Z_]\\w*)\\b)",
          "captures": {
            "1": { "name": "entity.name.function.renpy" },
            "2": { "name": "punctuation.separator.dot.renpy" },
            "3": { "name": "entity.name.function.renpy" }
          }
        }
      ]
    },
    "screen-action-reference": {
      "comment": "Highlight Jump/Call/ShowMenu first string argument as reference",
      "patterns": [
        {
          "name": "meta.screen.action.reference.renpy",
          "match": "\\b(?:Jump|Call|ShowMenu)\\(\\s*(['\"])(([A-Za-z_][A-Za-z0-9_]*)(?:\\.[A-Za-z_][A-Za-z0-9_]*)*)\\1",
          "captures": {
            "2": { "name": "entity.name.reference.label.renpy" },
            "3": { "name": "entity.name.reference.label.segment.renpy" }
          }
        }
      ]
    },
    "screen-build-in-properties": {
      "comment": "These are the ATL keywords, will need to fix this later",
      "patterns": [
        {
          "comment": "Special manipulation keywords",
          "match": "\\b(?<!\\.)(?:(warp)|(circles)|(clockwise)|(counterclockwise))\\b",
          "captures": {
            "1": { "name": "keyword.warp.renpy" },
            "2": { "name": "keyword.circles.renpy" },
            "3": { "name": "keyword.clockwise.renpy" },
            "4": { "name": "keyword.counterclockwise.renpy" }
          }
        },
        {
          "comment": "Special manipulation keywords",
          "name": "keyword.control.flow.renpy",
          "match": "\\b(?<!\\.)(?:action|at|(?:un)?hovered|alt|value|dragged|released)\\b"
        },
        {
          "comment": "Special manipulation keywords",
          "match": "\\b(?<!\\.)(key|default|input|(?:text|image)?button|grid|auto|mousearea|side|timer|[vh]?bar|action|viewport|(?:vp)?grid|imagemap|hotspot|hotbar|transclude)\\b",
          "captures": {
            "1": { "name": "keyword.other.renpy" }
          }
        },
        {
          "comment": "Random props",
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:(?:[xy]|top_|bottom_|left_|right_)padding|[xy]margin|background|width|height|area|draggable|droppable|drag_handle|mousewheel|scrollbars|cols|spacing|(?:text_|side_[xy])?align)\\b"
        },
        {
          "comment": "position props (int, absolute, or a float)",
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:[xy]?pos|[xy]?anchor|[xy]?maximum|(?:x?y?)center|radius)\\b"
        },
        {
          "comment": "position pair props",
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:around|alignaround|matrixanchor)\\b"
        },
        {
          "comment": "float props",
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:[xy]align|[xy]?zoom|alpha|additive|angle|delay|events|zpos)\\b"
        },
        {
          "comment": "float pair props",
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:align|knot)\\b"
        },
        {
          "comment": "int props",
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:[xy]offset|[xy]tile|size)\\b"
        },
        {
          "comment": "int pair props",
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:offset)\\b"
        },
        {
          "comment": "boolean props",
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:rotate_pad|transform_anchor|nearest|crop_relative|subpixel|zzoom|transpose|[xy]fill)\\b"
        },
        {
          "comment": "('#float' | None)",
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:rotate|[xy]pan|blur)\\b"
        },
        {
          "comment": "('#position' | None)",
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:[xy]size)\\b"
        },
        {
          "comment": "('\\(int, int, int, int\\)' | '\\(float, float, float, float\\)' | None)",
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:crop)\\b"
        },
        {
          "comment": "('\\(int, int\\)' | None)",
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:corner1|corner2)\\b"
        },
        {
          "comment": "('\\(position, position\\)' | None)",
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:xysize)\\b"
        },
        {
          "comment": "('#string' | None)",
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:fit|drag_name|child)\\b"
        },
        {
          "comment": "('\\(int, int\\)' | None)",
          "name": "invalid.deprecated.renpy",
          "match": "\\b(?<!\\.)(?:size|maxsize)\\b"
        },
        {
          "comment": "('#Matrix' | '#MatrixColor' | None)",
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:matrixcolor)\\b"
        },
        {
          "comment": "('#Matrix' | '#TransformMatrix' | None)",
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:matrixtransform)\\b"
        },
        {
          "comment": "('#bool' | '#float' | '\\(float, float, float\\)')",
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:perspective)\\b"
        }
      ]
    },
    "screen-simple-expression": {
      "patterns": [
        { "include": "source.renpy#renpy-only-expressions" },
        { "include": "#screen-build-in-properties" },
        { "include": "source.renpy.python#member-access" },
        { "include": "source.renpy.python#illegal-operator" },
        { "include": "source.renpy.python#operator" },
        { "include": "source.renpy.python#curly-braces" },
        { "include": "source.renpy.python#item-access" },
        { "include": "source.renpy.python#list" },
        { "include": "source.renpy.python#odd-function-call" },
        { "include": "source.renpy.python#round-braces" },
        { "include": "source.renpy.python#function-call" },
        { "include": "source.renpy.python#builtin-functions" },
        { "include": "source.renpy.python#builtin-types" },
        { "include": "source.renpy.python#builtin-exceptions" },
        { "include": "source.renpy.python#magic-names" },
        { "include": "source.renpy.python#special-names" },
        { "include": "source.renpy.python#illegal-names" },
        { "include": "source.renpy.python#special-variables" },
        { "include": "source.renpy.python#ellipsis" },
        { "include": "source.renpy.python#punctuation" },
        { "include": "source.renpy.python#line-continuation" },
        {
          "comment": "Tokenize identifiers",
          "name": "variable.name.python",
          "match": "\\b([[:alpha:]_]\\w*)\\b"
        },
        { "include": "source.renpy#whitespace" }
      ]
    },
    "screen-keywords": {
      "comment": "https://www.renpy.org/doc/html/screens.html#screen-statement",
      "patterns": [
        {
          "contentName": "meta.screen.sensitive.renpy",
          "begin": "(?<=^[ \\t]*)(sensitive)\\b[ \\t]*",
          "beginCaptures": {
            "1": { "name": "keyword.sensitive.renpy" }
          },
          "end": "$",
          "patterns": [ { "include": "#screen-simple-expression" } ]
        },
        {
          "name": "keyword.control.flow.renpy",
          "match": "\\b(?<!\\.)(?:showif|has|on|use)\\b"
        },
        {
          "name": "keyword.other.renpy",
          "match": "\\b(?<!\\.)(?:sensitive|tag|text|drag|draggroup|id|test|style)\\b[^\\.]"
        },
        {
          "name": "entity.other.attribute-name.transform.renpy entity.name.tag.css.transform.renpy",
          "match": "\\b(?<!\\.)(?:modal|style_group|style_prefix|zorder|tooltip|variant|layer|roll_forward)\\b"
        },
        {
          "name": "keyword.other.renpy",
          "match": "\\b(?<!\\.)(?:vbox|hbox|label|add|null)\\b"
        }
      ]
    },
    "screen-block-tester": {
      "patterns": [
        {
          "contentName": "meta.screen.block.renpy",
          "begin": "(?<=(^[ \\t]*)(?:screen|frame|fixed|window|viewport|drag|draggroup|(?:vp)?grid|vbox|hbox|imagemap)\\b.*?)(:)",
          "beginCaptures": {
            "2": { "name": "punctuation.section.screen.begin.renpy" }
          },
          "end": "^(?=(?!\\1)[ \\t]*[^\\s#]|\\1[^\\s#])",
          "patterns": [
            { "include": "#screen-language" }
          ]
        },
        {
          "contentName": "meta.atl.block.renpy",
          "begin": "(?<=(^[ \\t]*)(?:text)\\b.*?)(:)",
          "beginCaptures": {
            "2": { "name": "punctuation.section.atl.begin.renpy" }
          },
          "end": "^(?=(?!\\1)[ \\t]*[^\\s#]|\\1[^\\s#])",
          "patterns": [
            { "include": "#screen-language" },
            { "include": "source.renpy.atl" }
          ]
        }
      ]
    },

    "screen-frame": {
      "name": "meta.screen.frame.statement.renpy",
      "match": "(?<=^[ \\t]*)(frame)\\b",
      "captures": {
        "1": { "name": "keyword.frame.renpy" }
      }
    },
    "screen-fixed": {
      "name": "meta.screen.fixed.statement.renpy",
      "match": "(?<=^[ \\t]*)(fixed)\\b",
      "captures": {
        "1": { "name": "keyword.fixed.renpy" }
      }
    },
    "screen-window": {
      "name": "meta.screen.window.statement.renpy",
      "match": "(?<=^[ \\t]*)(window)\\b",
      "captures": {
        "1": { "name": "keyword.window.renpy" }
      }
    },
    "screen-text": {
      "name": "meta.screen.text.renpy",
      "begin": "(?<=^[ \\t]*)(text)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.text.renpy" }
      },
      "end": "(?=:)|$",
      "patterns": [
        { "include": "source.renpy#strings" },
        {
          "match": "(?<=text[ \\t]*)\\b(?:[a-zA-Z_0-9]+)\\b(?=[ \\t]+|$)",
          "name": "entity.name.type.text.renpy"
        },
        { "include": "source.renpy#at-statement" },
        { "include": "#screen-keywords" },
        { "include": "#screen-simple-expression" },
        { "include": "source.renpy#fallback-patterns" }
      ]
    },
    "screen-box": {
      "patterns": [
        {
          "name": "meta.screen.vbox.statement.renpy",
          "match": "(?<=^[ \\t]*)(vbox)\\b",
          "captures": {
            "1": { "name": "keyword.vbox.renpy" }
          }
        },
        {
          "name": "meta.screen.hbox.statement.renpy",
          "match": "(?<=^[ \\t]*)(hbox)\\b",
          "captures": {
            "1": { "name": "keyword.hbox.renpy" }
          }
        }
      ]
    },

    "screen": {
      "patterns": [
        {
          "comment": "See https://www.renpy.org/doc/html/screens.html",
          "contentName": "meta.screen.block.renpy",
          "begin": "(?<=^[ \\t]*)(screen)\\b",
          "beginCaptures": {
            "1": { "name": "storage.type.screen.renpy" }
          },
          "end": "$|^",
          "patterns": [
            { "include": "#screen-def-name" },
            { "include": "source.renpy.python#parameters" },
            { "include": "#screen-block-tester" },
            { "include": "source.renpy#fallback-patterns" }
          ]
        }
      ]
    },

    "screen-fallback": {
      "comment": "TODO: This is a temp fix for missing pattern references",
      "patterns": [ { "include": "source.renpy#base-patterns" } ]
    },

    "screen-language": {
      "comment": "https://www.renpy.org/doc/html/screens.html#screen-language",
      "patterns": [
        { "include": "source.renpy#define" },
        { "include": "source.renpy#default-statement" },
        { "include": "source.renpy#conditionals" },
        { "include": "source.renpy#python-statements" },
        { "include": "#screen-frame" },
        { "include": "#screen-fixed" },
        { "include": "#screen-window" },
        { "include": "#screen-box" },
        { "include": "#screen-text" },
        { "include": "#screen-block-tester" },
        { "include": "#screen-keywords" },
        { "include": "#screen-simple-expression" },
        { "include": "#screen-fallback" }
      ]
    }
  }
}
